See the Assessment Guide for information on how to interpret this report.

Want to receive personalized feedback on this submission?
You can pay to have a teaching assistant read and provide
personalized feedback on your submission at https://mooc.codepost.io.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 5 warnings)

Correctness:  13/38 tests passed
Memory:       8/8 tests passed
Timing:       4/20 tests passed

Aggregate score: 44.53%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.0K Jun 22 17:51 Percolation.java
2.3K Jun 22 17:51 PercolationStats.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Percolation.java
*-----------------------------------------------------------

% javac PercolationStats.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Percolation.java:57:23: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:64:30: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] PercolationStats.java:6:46: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] PercolationStats.java:6:46: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] PercolationStats.java:25:39: Typecast is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 5 warnings.

% custom checkstyle checks for Percolation.java
*-----------------------------------------------------------
[INFO] Percolation.java:87: Using a loop in this method might be a performance bug. [Performance]

% custom checkstyle checks for PercolationStats.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Percolation
*-----------------------------------------------------------
Running 21 total tests.

Tests 1 through 7 create a Percolation object using your code, then repeatedly
open sites by calling open(). After each call to open(), it checks the return
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.
Tests 12 through 15 create a Percolation object using your code, then repeatedly
call the methods open(), isOpen(), isFull(), percolates(), and, numberOfOpenSites()
in random order with probabilities p = (p1, p2, p3, p4, p5). The tests stop
immediately after the system percolates.

Tests 18 through 21 test backwash.

Except as noted, a site is opened at most once.

Test 1: open predetermined list of sites using file inputs
  * filename = input6.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input8.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input8-no.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input10-no.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = greeting57.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = heart25.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 2: open random sites until the system percolates
  * n = 3
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 5
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 10
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 10
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 20
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 20
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 50
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 50
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 3: open predetermined sites for n = 1 and n = 2 (corner case test)
  * filename = input1.txt
    - percolates() returns wrong value after 0 sites opened
    - student   percolates() = true
    - reference percolates() = false

  * filename = input1-no.txt
    - percolates() returns wrong value after 0 sites opened
    - student   percolates() = true
    - reference percolates() = false

  * filename = input2.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input2-no.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 4: check predetermined sites with long percolating path
  * filename = snake13.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = snake101.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 5: open every site
  * filename = input5.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 6: open random sites until the system percolates,
        allowing open() to be called on a site more than once
  * n = 3
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 5
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 10
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 10
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 20
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 20
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 50
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * n = 50
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 7: open random sites with large n
  * n = 250
    - numberOfOpenSites() returns wrong value after 2 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 2

    - failed on call 3 of 1000

  * n = 500
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on call 2 of 1000

  * n = 1000
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on call 0 of 1000

  * n = 2000
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on call 18 of 1000

==> FAILED

Test 8: call methods with invalid arguments
  * n = 10, (row, col) = (-1, 5)
  * n = 10, (row, col) = (11, 5)
  * n = 10, (row, col) = (0, 5)
  * n = 10, (row, col) = (5, -1)
  * n = 10, (row, col) = (5, 11)
  * n = 10, (row, col) = (5, 0)
  * n = 10, (row, col) = (-2147483648, -2147483648)
  * n = 10, (row, col) = (2147483647, 2147483647)
==> passed

Test 9: call constructor with invalid argument
  * n = -10
  * n = -1
  * n = 0
==> passed

Test 10: create multiple Percolation objects at the same time
        (to make sure you didn't store data in static variables)
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 11: open predetermined list of sites using file inputs,
         but permute the order in which methods are called
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

==> FAILED

Test 12: call open(), isOpen(), and numberOfOpenSites()
         in random order until just before system percolates
  * n = 3, trials = 40, p = (0.4, 0.4, 0.0, 0.0, 0.3)
    - numberOfOpenSites() returns wrong value after 3 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 3

    - failed on trial 1 of 40
    - sequence of operations was:
         percolation.open(1, 1)
         percolation.numberOfOpenSites()
         percolation.open(2, 3)
         percolation.open(3, 3)
         percolation.numberOfOpenSites()

  * n = 5, trials = 20, p = (0.4, 0.4, 0.0, 0.0, 0.3)
    - numberOfOpenSites() returns wrong value after 9 sites opened
    - student   numberOfOpenSites() = 4
    - reference numberOfOpenSites() = 9

    - failed on trial 1 of 20

  * n = 7, trials = 10, p = (0.4, 0.4, 0.0, 0.0, 0.3)
    - numberOfOpenSites() returns wrong value after 7 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 7

    - failed on trial 1 of 10
    - sequence of operations was:
         percolation.open(5, 7)
         percolation.open(1, 6)
         percolation.isOpen(row, col) for each row and col
         percolation.isOpen(row, col) for each row and col
         percolation.open(3, 4)
         percolation.isOpen(row, col) for each row and col
         percolation.open(3, 7)
         percolation.open(7, 7)
         percolation.open(2, 6)
         percolation.open(7, 3)
         percolation.numberOfOpenSites()

  * n = 10, trials = 5, p = (0.4, 0.4, 0.0, 0.0, 0.3)
    - numberOfOpenSites() returns wrong value after 2 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 2

    - failed on trial 1 of 5
    - sequence of operations was:
         percolation.numberOfOpenSites()
         percolation.isOpen(row, col) for each row and col
         percolation.isOpen(row, col) for each row and col
         percolation.numberOfOpenSites()
         percolation.numberOfOpenSites()
         percolation.numberOfOpenSites()
         percolation.isOpen(row, col) for each row and col
         percolation.open(4, 1)
         percolation.open(2, 2)
         percolation.numberOfOpenSites()

  * n = 20, trials = 2, p = (0.4, 0.4, 0.0, 0.0, 0.3)
    - numberOfOpenSites() returns wrong value after 2 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 2

    - failed on trial 1 of 2
    - sequence of operations was:
         percolation.isOpen(row, col) for each row and col
         percolation.open(18, 7)
         percolation.open(3, 1)
         percolation.isOpen(row, col) for each row and col
         percolation.isOpen(row, col) for each row and col
         percolation.numberOfOpenSites()

  * n = 50, trials = 1, p = (0.4, 0.4, 0.0, 0.0, 0.3)
    - numberOfOpenSites() returns wrong value after 2 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 2

    - failed on trial 1 of 1
    - sequence of operations was:
         percolation.isOpen(row, col) for each row and col
         percolation.isOpen(row, col) for each row and col
         percolation.open(21, 22)
         percolation.numberOfOpenSites()
         percolation.isOpen(row, col) for each row and col
         percolation.open(24, 8)
         percolation.numberOfOpenSites()

==> FAILED

Test 13: call open() and percolates() in random order until just before system percolates
  * n = 3, trials = 40, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 6 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 40
    - sequence of operations was:
         percolation.open(3, 3)
         percolation.open(1, 1)
         percolation.open(2, 1)
         percolation.percolates()
         percolation.open(1, 3)
         percolation.open(2, 2)
         percolation.percolates()
         percolation.open(2, 3)
         percolation.percolates()

  * n = 5, trials = 20, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 18 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 20

  * n = 7, trials = 10, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 28 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 10

  * n = 10, trials = 5, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 60 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 5

  * n = 20, trials = 2, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 266 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 2

  * n = 50, trials = 1, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 1598 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 1

==> FAILED

Test 14: call open() and isFull() in random order until just before system percolates
  * n = 3, trials = 40, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 5 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 40
    - sequence of operations was:
         percolation.open(2, 2)
         percolation.open(2, 1)
         percolation.open(3, 1)
         percolation.open(1, 3)
         percolation.open(3, 2)
         percolation.isFull(row, col) for each row and col

  * n = 5, trials = 20, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 20
    - sequence of operations was:
         percolation.open(5, 4)
         percolation.isFull(row, col) for each row and col

  * n = 7, trials = 10, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 10
    - sequence of operations was:
         percolation.isFull(row, col) for each row and col

  * n = 10, trials = 5, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 5
    - sequence of operations was:
         percolation.isFull(row, col) for each row and col

  * n = 20, trials = 2, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 2
    - sequence of operations was:
         percolation.open(18, 9)
         percolation.isFull(row, col) for each row and col

  * n = 50, trials = 1, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 1
    - sequence of operations was:
         percolation.isFull(row, col) for each row and col

==> FAILED

Test 15: call all methods in random order until just before system percolates
  * n = 3, trials = 40, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - numberOfOpenSites() returns wrong value after 4 sites opened
    - student   numberOfOpenSites() = 2
    - reference numberOfOpenSites() = 4

    - numberOfOpenSites() returns wrong value after 2 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 2

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 3 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = false
    - reference isFull(1, 1) = true

  * n = 5, trials = 20, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - numberOfOpenSites() returns wrong value after 4 sites opened
    - student   numberOfOpenSites() = 2
    - reference numberOfOpenSites() = 4

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - numberOfOpenSites() returns wrong value after 2 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 2

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = false
    - reference isFull(1, 1) = true

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - numberOfOpenSites() returns wrong value after 3 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 3

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * n = 7, trials = 10, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * n = 10, trials = 5, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 3 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * n = 20, trials = 2, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

  * n = 50, trials = 1, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

==> passed

Test 16: call all methods in random order until almost all sites are open
         (with inputs not prone to backwash)
  * n = 3
    - isFull() returns wrong value after 3 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 40

  * n = 5
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 20

  * n = 7
    - numberOfOpenSites() returns wrong value after 2 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 2

    - failed on trial 1 of 10

  * n = 10
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 5

  * n = 20
    - isFull() returns wrong value after 5 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 2

  * n = 50
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 1

==> FAILED

Test 17: substitute WeightedQuickUnionUF data type that sets root nondeterministically;
         call all methods in random order until almost all sites are open
         (with inputs not prone to backwash)
  * n = 3
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 40

  * n = 5
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 20

  * n = 7
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = false
    - reference isFull(1, 1) = true

    - failed on trial 1 of 10

  * n = 10
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 5

  * n = 20
    - numberOfOpenSites() returns wrong value after 4 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 4

    - failed on trial 1 of 2

  * n = 50
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 1

==> FAILED

Test 18: check for backwash with predetermined sites
  * filename = input20.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input10.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input50.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = jerry47.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = sedgewick60.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = wayne98.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 19: check for backwash with predetermined sites that have
         multiple percolating paths
  * filename = input3.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input4.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
  * filename = input7.txt
    - isFull() and isOpen() are inconsistent after 0 sites opened
    - student isFull(1, 1) = true
    - student isOpen(1, 1) = false
    - by definition, a full site is open
==> FAILED

Test 20: call all methods in random order until all sites are open
         (these inputs are prone to backwash)
  * n = 3
    - isFull() returns wrong value after 4 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 40

  * n = 5
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 20

  * n = 7
    - numberOfOpenSites() returns wrong value after 2 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 2

    - failed on trial 1 of 10

  * n = 10
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 5

  * n = 20
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 2

  * n = 50
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 1

==> FAILED

Test 21: substitute WeightedQuickUnionUF data type that sets root nondeterministically;
         call all methods in random order until all sites are open
         (these inputs are prone to backwash)
  * n = 3
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 40

  * n = 5
    - numberOfOpenSites() returns wrong value after 2 sites opened
    - student   numberOfOpenSites() = 1
    - reference numberOfOpenSites() = 2

    - failed on trial 1 of 20

  * n = 7
    - isFull() returns wrong value after 5 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 10

  * n = 10
    - isFull() returns wrong value after 1 site opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 5

  * n = 20
    - isFull() returns wrong value after 0 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 2

  * n = 50
    - isFull() returns wrong value after 2 sites opened
    - student   isFull(1, 1) = true
    - reference isFull(1, 1) = false

    - failed on trial 1 of 1

==> FAILED


Total: 3/21 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Percolation)
********************************************************************************

Testing correctness of PercolationStats
*-----------------------------------------------------------
Running 17 total tests.

Test 1: check formatting of output of main()
  % java-algs4 PercolationStats 20 10
  mean                   = 0.56175
  stddev                 = 0.004095902777777777
  95% confidence interval= [0.522082859806748,0.601417140193252]

  % java-algs4 PercolationStats 200 100
  mean                   = 0.5916135000000001
  stddev                 = 9.684524520202023E-5
  95% confidence interval= [0.5896846643564885,0.5935423356435118]

==> passed

Test 2: check that methods in PercolationStats do not print to standard output
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 3: check that mean() returns value in expected range
  * n =   2, trials = 10000
    - student PercolationStats mean()     = 0.604975
    - true mean                           = 0.6666666666666666
    - 99.99% confidence interval          = [0.662284, 0.671050]
    - a correct solution will fail this test by bad luck 1 time in 10,000


  * n =   5, trials = 10000
    - student PercolationStats mean()     = 0.565100
    - true mean                           = 0.5939914915553629
    - 99.99% confidence interval          = [0.590174, 0.597809]
    - a correct solution will fail this test by bad luck 1 time in 10,000


  * n =  10, trials = 10000
    - student PercolationStats mean()     = 0.576387
    - true mean                           = 0.5904
    - 99.99% confidence interval          = [0.587665, 0.593135]
    - a correct solution will fail this test by bad luck 1 time in 10,000


  * n =  25, trials = 10000
    - student PercolationStats mean()     = 0.587487
    - true mean                           = 0.5917
    - 99.99% confidence interval          = [0.590140, 0.593260]
    - a correct solution will fail this test by bad luck 1 time in 10,000


==> FAILED

Test 4: check that stddev() returns value in expected range
  * n =   2, trials = 10000
    - student PercolationStats stddev() = 0.017265
    - true stddev                       = 0.117851
    - 99.99% confidence interval        = [0.114620, 0.121104]
    - a correct solution will fail this test by bad luck 1 time in 10,000

  * n =   5, trials = 10000
    - student PercolationStats stddev() = 0.006530
    - true stddev                       = 0.102653
    - 99.99% confidence interval        = [0.099839, 0.105487]
    - a correct solution will fail this test by bad luck 1 time in 10,000

  * n =  10, trials = 10000
    - student PercolationStats stddev() = 0.003368
    - true stddev                       = 0.073553
    - 99.99% confidence interval        = [0.071536, 0.075583]
    - a correct solution will fail this test by bad luck 1 time in 10,000

  * n =  25, trials = 10000
    - student PercolationStats stddev() = 0.001270
    - true stddev                       = 0.041952
    - 99.99% confidence interval        = [0.040802, 0.043110]
    - a correct solution will fail this test by bad luck 1 time in 10,000

==> FAILED

Test 5: check that PercolationStats constructor creates
        trials Percolation objects, each of size n-by-n
  * n =  15, trials =  15
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 6: check that PercolationStats.main() creates
        trials Percolation objects, each of size n-by-n
  * n =  15, trials =  15
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 7: check that PercolationStats calls open() until system percolates
  * n =  20, trials =  10
    - PercolationStats does not open sites until system percolates on Percolation object 2

  * n =  50, trials =  20
    - PercolationStats does not open sites until system percolates on Percolation object 15

  * n = 100, trials =  50
  * n =  64, trials = 150
    - PercolationStats does not open sites until system percolates on Percolation object 63

==> FAILED

Test 8: check that PercolationStats does not call open() after system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 9: check that mean() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 10: check that stddev() is consistent with the number of intercepted calls to open()
         on blocked sites
  * n =  20, trials =  10
    - student PercolationStats stddev()                  = 0.0019797916666666657
    - anticipated sample stddev   from intercepted calls = 0.04449484988924747
    - anticipated sample variance from intercepted calls = 0.0019797916666666657
  * n =  50, trials =  20
    - student PercolationStats stddev()                  = 6.350564210526311E-4
    - anticipated sample stddev   from intercepted calls = 0.025200325812430105
    - anticipated sample variance from intercepted calls = 6.350564210526311E-4
  * n = 100, trials =  50
    - student PercolationStats stddev()                  = 1.8718803673469382E-4
    - anticipated sample stddev   from intercepted calls = 0.013681667907630772
    - anticipated sample variance from intercepted calls = 1.8718803673469382E-4
  * n =  64, trials = 150
    - student PercolationStats stddev()                  = 4.60287804571574E-4
    - anticipated sample stddev   from intercepted calls = 0.021454319019059403
    - anticipated sample variance from intercepted calls = 4.60287804571574E-4
==> FAILED

Test 11: check that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()
  * n =  20, trials =  10
    - PercolationStats confidence low  = 0.5447123841941612
    - PercolationStats confidence high = 0.5782876158058385
    - PercolationStats mean            = 0.5614999999999999
    - PercolationStats stddev          = 7.336111111111113E-4
    - T                                = 10
    - student T                        = 10
    - mean - 1.96 * stddev / sqrt(T)   = 0.561045303122528
    - mean + 1.96 * stddev / sqrt(T)   = 0.5619546968774718

  * n =  50, trials =  20
    - PercolationStats confidence low  = 0.5686853430891835
    - PercolationStats confidence high = 0.5963546569108163
    - PercolationStats mean            = 0.5825199999999999
    - PercolationStats stddev          = 9.964480000000016E-4
    - T                                = 20
    - student T                        = 20
    - mean - 1.96 * stddev / sqrt(T)   = 0.5820832874090474
    - mean + 1.96 * stddev / sqrt(T)   = 0.5829567125909525

  * n = 100, trials =  50
    - PercolationStats confidence low  = 0.5897357389896343
    - PercolationStats confidence high = 0.5975962610103656
    - PercolationStats mean            = 0.5936659999999999
    - PercolationStats stddev          = 2.01048412244898E-4
    - T                                = 50
    - student T                        = 50
    - mean - 1.96 * stddev / sqrt(T)   = 0.593610272223307
    - mean + 1.96 * stddev / sqrt(T)   = 0.5937217277766929

  * n =  64, trials = 150
    - PercolationStats confidence low  = 0.5851696249104551
    - PercolationStats confidence high = 0.591510062589545
    - PercolationStats mean            = 0.58833984375
    - PercolationStats stddev          = 3.9242584433331573E-4
    - T                                = 150
    - student T                        = 150
    - mean - 1.96 * stddev / sqrt(T)   = 0.5882770425354076
    - mean + 1.96 * stddev / sqrt(T)   = 0.5884026449645925

==> FAILED

Test 12: check that exception is thrown if either n or trials is out of bounds
  * n = -23, trials =  42
  * n =  23, trials =   0
  * n = -42, trials =   0
  * n =  42, trials =  -1
  * n = -2147483648, trials = -2147483648
==> passed

Test 13: create two PercolationStats objects at the same time and check mean()
         (to make sure you didn't store data in static variables)
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5
  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10
  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100
  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10
==> passed

Test 14: check that the methods return the same value, regardless of
         the order in which they are called
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 15: check that no calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 16: check distribution of number of sites opened until percolation
  * n = 2, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                2     54781   33333.0      54429.91
                3     43753   66667.0     -36853.14
        -------------------------------------------
                      98534  100000.0      17576.77
    
    G-statistic = 17576.77 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


  * n = 3, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                3      3990    3571.0        885.35
                4     18748   13889.0      11248.42
                5     41805   29365.0      29532.09
                6     30376   32937.0      -4917.50
                7      5076   20238.0     -14040.61
        -------------------------------------------
                      99995  100000.0      22707.76
    
    G-statistic = 22707.76 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


  * n = 4, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                4       213     220.0        -13.77
                5      1152    1154.0         -4.00
                6      3609    3497.0        227.55
                7      8832    7822.0       2145.14
                8     18199   13850.0       9939.62
                9     28027   19542.0      20213.20
               10     25844   21522.0       9459.05
               11     11681   17924.0     -10003.07
               12      2303   10733.0      -7089.14
               13       140    3736.0       -919.56
        -------------------------------------------
                     100000  100000.0      23955.01
    
    G-statistic = 23955.01 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


==> FAILED

Test 17: check that each site is opened the expected number of times
  * n = 2, trials = 100000
  * n = 3, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
           (1, 1)     56679   56351.3        657.25
           (2, 1)     57614   57977.8       -725.37
           (3, 1)     56821   56351.3        943.25
           (1, 2)     56713   56146.9       1137.99
           (2, 2)     58625   59762.3      -2252.88
           (3, 2)     56617   56146.9        944.22
           (1, 3)     56629   56351.3        556.71
           (2, 3)     57162   57977.8      -1620.12
           (3, 3)     56557   56351.3        412.10
        -------------------------------------------
                     513417  513417.0         53.14
    
    G-statistic = 53.14 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


  * n = 4, trials = 100000
==> FAILED


Total: 10/17 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Percolation)
********************************************************************************

Analyzing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check memory usage as a function of T trials for n = 100
            (max allowed: 8*T + 128 bytes)

                 T        bytes
--------------------------------------------
=> passed       16          176         
=> passed       32          304         
=> passed       64          560         
=> passed      128         1072         
==> 4/4 tests passed


Estimated student memory = 8.00 T + 48.00   (R^2 = 1.000)

Total: 4/4 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference Percolation)
********************************************************************************

Timing PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1: Call PercolationStats constructor and instance methods and
        count calls to StdStats.mean() and StdStats.stddev().
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 2: Call PercolationStats constructor and instance methods and
        count calls to methods in StdRandom.
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 3: Call PercolationStats constructor and instance methods and
        count calls to methods in Percolation.
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 4: Call PercolationStats constructor and instance methods with trials = 3
        and values of n that go up by a multiplicative factor of sqrt(2).
        The test passes when n reaches 2,896.

     The approximate order-of-growth is n ^ (log ratio)

         n  seconds log ratio
     ------------------------
       724     0.15       2.4
      1024     0.31       2.2
      1448     0.81       2.7
      2048     2.02       2.6
      2896     4.92       2.6
==> passed


Total: 4/4 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check that total memory <= 17 n^2 + 128 n + 1024 bytes

                 n        bytes
--------------------------------------------
=> passed       64        37040         
=> passed      256       590000         
=> passed      512      2359472         
=> passed     1024      9437360         
==> 4/4 tests passed


Estimated student memory = 9.00 n^2 + 0.00 n + 176.00   (R^2 = 1.000)


Test 2 (bonus): check that total memory <= 11 n^2 + 128 n + 1024 bytes
   -  bonus available only if solution passes backwash correctness test
==> FAILED


Total: 4/4 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Percolation
*-----------------------------------------------------------
Running 16 total tests.

Test 1a-1e: Creates an n-by-n percolation system; open sites at random until
            the system percolates, interleaving calls to percolates() and open().
            Count calls to connected(), union() and find().

                                       2 * connected()
                 n       union()              + find()        constructor
-----------------------------------------------------------------------------------
=> passed       16          238                   388                   1         
=> passed       32          979                  1604                   1         
=> passed       64         3961                  6536                   1         
=> passed      128        13349                 24034                   1         
=> passed      256        53206                 96152                   1         
=> passed      512       220413                392084                   1         
=> passed     1024       863306               1552346                   1         
==> 7/7 tests passed


If one of the values in the table violates the performance limits
the factor by which you failed the test appears in parentheses.
For example, (9.6x) in the union() column indicates that it uses
9.6x too many calls.


Tests 2a-2f: Check whether the number of calls to union(), connected(), and find()
             is a constant per call to open(), isOpen(), isFull(), and percolates().
             The table shows the maximum number of union() and find() calls made
             during a single call to open(), isOpen(), isFull(), and percolates().
             One call to connected() counts as two calls to find().

                 n     per open()      per isOpen()    per isFull()    per percolates() 
---------------------------------------------------------------------------------------------


WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.
         This usually indicates a performance bug or an infinite loop.




Total: 0/16 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================
