See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 4 warnings)
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 4 warnings)

Correctness:  32/45 tests passed
Memory:       95/114 tests passed
Timing:       145/193 tests passed

Aggregate score: 71.03%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.8K Jul 17 12:26 Deque.java
 449 Jul 17 12:26 Permutation.java
3.3K Jul 17 12:26 RandomizedQueue.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------
Deque.java:17: warning: [unchecked] unchecked cast
        dq = (Item[]) new Object[sz];
                      ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class Deque
Deque.java:26: warning: [unchecked] unchecked cast
        final Item[] aux = (Item[]) new Object[sz];
                                    ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class Deque
2 warnings

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:15: warning: [unchecked] unchecked cast
        q = (Item[]) new Object[sz];
                     ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:22: warning: [unchecked] unchecked cast
        final Item[] aux = (Item[]) new Object[sz];
                                    ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
2 warnings

% javac Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
H D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'a' but that value is never used.  At RandomizedQueue.java:[line 30]
H D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'b' but that value is never used.  At RandomizedQueue.java:[line 31]
L D UC_USELESS_VOID_METHOD UC: The void method 'swap()' appears to serve no purpose.  At RandomizedQueue.java:[line 32]


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Deque.java:1: Java automatically imports all classes and interfaces in the package 'java.lang'. So, there is no need to import such classes or interfaces; you can refer directly to them without the 'java.lang' prefix. [UnnecessaryJavaLang]
[WARN] Deque.java:1:1: Unnecessary import statement for 'java.lang.Object' because it is from the package 'java.lang'. [RedundantImport]
[WARN] Deque.java:1:8: Unused import statement for 'java.lang.Object'. [UnusedImports]
[WARN] Deque.java:116: Comment matches to-do format 'TODO:'. [TodoComment]
Checkstyle ends with 0 errors and 4 warnings.

% custom checkstyle checks for Deque.java
*-----------------------------------------------------------

% custom checkstyle checks for RandomizedQueue.java
*-----------------------------------------------------------

% custom checkstyle checks for Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 17 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
    - failed on operation 20 of 50

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    Deque.addLast(Deque.java:92)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:78)
    TestDeque.test5(TestDeque.java:592)
    TestDeque.main(TestDeque.java:962)


  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
    - failed on operation 19 of 500

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    Deque.addLast(Deque.java:92)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:78)
    TestDeque.test5(TestDeque.java:593)
    TestDeque.main(TestDeque.java:962)


  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
    - failed on operation 10 of 1000

    java.lang.ArrayIndexOutOfBoundsException: Index 8 out of bounds for length 8

    Deque.addLast(Deque.java:92)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:78)
    TestDeque.test5(TestDeque.java:594)
    TestDeque.main(TestDeque.java:962)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.addLast(2)
         deque.addLast(3)
         deque.addLast(4)
         deque.addLast(5)
         deque.addLast(6)
         deque.removeFirst()     ==> 1
         deque.addLast(8)
         deque.addLast(9)
         deque.addLast(10)

  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    - failed on operation 13 of 50

    java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    Deque.addLast(Deque.java:92)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:78)
    TestDeque.test5(TestDeque.java:596)
    TestDeque.main(TestDeque.java:962)


  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    - failed on operation 59 of 1000

    java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    Deque.addLast(Deque.java:92)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:78)
    TestDeque.test5(TestDeque.java:598)
    TestDeque.main(TestDeque.java:962)


==> FAILED

Test 6: check random calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 14 of 1000

    java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    Deque.addLast(Deque.java:92)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:78)
    TestDeque.test6(TestDeque.java:612)
    TestDeque.main(TestDeque.java:965)


  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 367 of 500

    java.lang.ArrayIndexOutOfBoundsException: Index 8 out of bounds for length 8

    Deque.addLast(Deque.java:92)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:78)
    TestDeque.test6(TestDeque.java:615)
    TestDeque.main(TestDeque.java:965)


  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 596 of 1000

    java.lang.ArrayIndexOutOfBoundsException: Index 8 out of bounds for length 8

    Deque.addLast(Deque.java:92)
    TestDeque.checkRandomIntermixedOperations(TestDeque.java:78)
    TestDeque.test6(TestDeque.java:616)
    TestDeque.main(TestDeque.java:965)


==> FAILED

Test 7: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: check whether two Deque objects can be created at the same time
  * n = 10
  * n = 1000
==> passed

Test 9: check iterator() after n calls to addFirst()
  * n = 10
  * n = 50
==> passed

Test 10: check iterator() after each of m intermixed calls to
         addFirst(), addLast(), removeFirst(), and removeLast()
  * m = 20
    - number of student   entries = 0
    - number of reference entries = 1
    - iterator() yields wrong entries after applying operation 1
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)

  * m = 50
    - number of student   entries = 0
    - number of reference entries = 1
    - iterator() yields wrong entries after applying operation 1
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addLast(1)

  * m = 100
    - number of student   entries = 0
    - number of reference entries = 1
    - iterator() yields wrong entries after applying operation 1
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)

  * m = 1000
    - number of student   entries = 0
    - number of reference entries = 1
    - iterator() yields wrong entries after applying operation 1
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addLast(1)

==> FAILED

Test 11: create two nested iterators to same deque
  * n = 10
    - inner iterator returned fewer than 10 items

  * n = 50
    - inner iterator returned fewer than 50 items

==> FAILED

Test 12: create two parallel iterators to same deque
    - failed on call 9 to hasNext()
    - student   iterator 1 hasNext() = false
    - student   iterator 2 hasNext() = false
    - reference iterator   hasNext() = true

    - failed on call 49 to hasNext()
    - student   iterator 1 hasNext() = false
    - student   iterator 2 hasNext() = false
    - reference iterator   hasNext() = true

==> FAILED

Test 13: create an iterator and check calls to next() and hasNext()
  * 10 consecutive calls to hasNext() on a deque of size 10
  * 10 consecutive calls to next() on a deque of size 10
  * 50 random intermixed calls to next() and hasNext() on a deque of size 10
  * 1000 random intermixed calls to next() and hasNext() on a deque of size 100
==> passed

Test 14: create Deque objects of different parameterized types
==> passed

Test 15: call addFirst() and addLast() with null argument
==> passed

Test 16: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 17: call iterator() when the deque is empty
    - hasNext() returns true

==> FAILED


Total: 11/17 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 19 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)

    java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 16

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    TestRandomizedQueue.checkRandomIntermixedOperations(TestRandomizedQueue.java:117)
    TestRandomizedQueue.test2(TestRandomizedQueue.java:847)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1303)

    - failed on operation 23 of 50

  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)

    java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    TestRandomizedQueue.checkRandomIntermixedOperations(TestRandomizedQueue.java:117)
    TestRandomizedQueue.test2(TestRandomizedQueue.java:848)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1303)

    - failed on operation 12 of 500

  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)

    java.lang.ArrayIndexOutOfBoundsException: Index 512 out of bounds for length 512

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    TestRandomizedQueue.checkRandomIntermixedOperations(TestRandomizedQueue.java:117)
    TestRandomizedQueue.test2(TestRandomizedQueue.java:849)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1303)

    - failed on operation 876 of 1000

  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)

    java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    TestRandomizedQueue.checkRandomIntermixedOperations(TestRandomizedQueue.java:117)
    TestRandomizedQueue.test2(TestRandomizedQueue.java:852)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1303)

    - failed on operation 336 of 500

  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)

    java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    TestRandomizedQueue.checkRandomIntermixedOperations(TestRandomizedQueue.java:117)
    TestRandomizedQueue.test2(TestRandomizedQueue.java:853)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1303)

    - failed on operation 374 of 1000

==> FAILED

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)

    java.lang.ArrayIndexOutOfBoundsException: Index 8 out of bounds for length 8

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    TestRandomizedQueue.checkRandomIntermixedOperations(TestRandomizedQueue.java:117)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:875)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1309)

    - failed on operation 15 of 50

  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)

    java.lang.ArrayIndexOutOfBoundsException: Index 8 out of bounds for length 8

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    TestRandomizedQueue.checkRandomIntermixedOperations(TestRandomizedQueue.java:117)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:877)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1309)

    - failed on operation 14 of 1000

  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
==> FAILED

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
==> passed

Test 6: create multiple randomized queue objects at the same time
  * n = 10
  * n = 100
==> passed

Test 7: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10
  * n = 50
==> passed

Test 8: check that iterator() returns correct items after sequence
        of m enqueue() and dequeue() operations
  * m = 10

    java.lang.ArrayIndexOutOfBoundsException: Index 8 out of bounds for length 8

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    TestRandomizedQueue.checkIteratorAfterEnqueueDequeue(TestRandomizedQueue.java:991)
    TestRandomizedQueue.test8(TestRandomizedQueue.java:1021)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1321)

  * m = 1000

    java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    TestRandomizedQueue.checkIteratorAfterEnqueueDequeue(TestRandomizedQueue.java:991)
    TestRandomizedQueue.test8(TestRandomizedQueue.java:1022)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1321)

==> FAILED

Test 9: create two nested iterators over the same randomized queue
  * n = 10
    - two inner iterators return the same sequence of items
    - they should return the same set of items but in a
      different order

  * n = 50
    - two inner iterators return the same sequence of items
    - they should return the same set of items but in a
      different order

==> FAILED

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
    - two iterators return the same sequence of values
    - they should return the same set of values but in a
      different order

  * n = 50
    - two iterators return the same sequence of values
    - they should return the same set of values but in a
      different order

==> FAILED

Test 11: create two iterators over different randomized queues
==> passed

Test 12: create an iterator and check calls to next() and hasNext()
  * 10 consecutive calls to hasNext() on a deque of size 10
  * 10 consecutive calls to next() on a deque of size 10
  * 50 random intermixed calls to next() and hasNext() on a deque of size 10
  * 1000 random intermixed calls to next() and hasNext() on a deque of size 100
==> passed

Test 13: create RandomizedQueue objects of different parameterized types
==> passed

Test 14: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
  * n = 5, trials = 12000
  * n = 8, trials = 12000
  * n = 10, trials = 12000
==> passed

Test 15: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
               AB         0    6000.0          0.00
               BA     12000    6000.0      16635.53
        -------------------------------------------
                      12000   12000.0      16635.53
    
    G-statistic = 16635.53 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 3, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              ABC         0    2000.0          0.00
              ACB         0    2000.0          0.00
              BAC         0    2000.0          0.00
              BCA         0    2000.0          0.00
              CAB         0    2000.0          0.00
              CBA     12000    2000.0      43002.23
        -------------------------------------------
                      12000   12000.0      43002.23
    
    G-statistic = 43002.23 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 4, trials = 12000

    java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    TestRandomizedQueue.checkRandomnessOfDequeue(TestRandomizedQueue.java:670)
    TestRandomizedQueue.test15(TestRandomizedQueue.java:1125)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1342)

  * n = 5, trials = 12000

==> FAILED

Test 16: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
               AB     12000    6000.0      16635.53
               BA         0    6000.0          0.00
        -------------------------------------------
                      12000   12000.0      16635.53
    
    G-statistic = 16635.53 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 3, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              ABC     12000    2000.0      43002.23
              ACB         0    2000.0          0.00
              BAC         0    2000.0          0.00
              BCA         0    2000.0          0.00
              CAB         0    2000.0          0.00
              CBA         0    2000.0          0.00
        -------------------------------------------
                      12000   12000.0      43002.23
    
    G-statistic = 43002.23 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 4, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
             ABCD     12000     500.0      76273.29
             ABDC         0     500.0          0.00
             ACBD         0     500.0          0.00
             ACDB         0     500.0          0.00
             ADBC         0     500.0          0.00
             ADCB         0     500.0          0.00
             BACD         0     500.0          0.00
             BADC         0     500.0          0.00
             BCAD         0     500.0          0.00
             BCDA         0     500.0          0.00
             BDAC         0     500.0          0.00
             BDCA         0     500.0          0.00
             CABD         0     500.0          0.00
             CADB         0     500.0          0.00
             CBAD         0     500.0          0.00
             CBDA         0     500.0          0.00
             CDAB         0     500.0          0.00
             CDBA         0     500.0          0.00
             DABC         0     500.0          0.00
             DACB         0     500.0          0.00
             DBAC         0     500.0          0.00
             DBCA         0     500.0          0.00
             DCAB         0     500.0          0.00
             DCBA         0     500.0          0.00
        -------------------------------------------
                      12000   12000.0      76273.29
    
    G-statistic = 76273.29 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 5, trials = 12000

==> FAILED

Test 17: call enqueue() with a null argument
==> passed

Test 18: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 19: call iterator() when randomized queue is empty
==> passed


Total: 12/19 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt
  F
  H
  I

  % java Permutation 3 < distinct.txt
  I
  E
  F

  % java Permutation 8 < duplicates.txt
  AA
  BB
  BB
  BB
  CC
  CC
  BB
  BB

==> passed

Test 1b: check formatting for other inputs
  % java Permutation 8 < mediumTale.txt
  was
  was
  times
  the
  the
  times
  was
  wisdom

  % java Permutation 0 < distinct.txt
  [no output]

==> passed

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 3
  * filename = duplicates.txt, k = 8
  * filename = mediumTale.txt, k = 8
==> passed

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 1
  * filename = distinct.txt, k = 9
  * filename = permutation6.txt, k = 6
  * filename = permutation10.txt, k = 10
==> passed

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 6
  * filename = permutation8.txt, k = 2
  * filename = tinyTale.txt, k = 10
==> passed

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
  * filename = mediumTale.txt, k = 20
  * filename = tale.txt, k = 10
  * filename = tale.txt, k = 50
==> passed

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==> passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
  * filename = permutation4.txt, k = 2
  * filename = permutation4.txt, k = 3
  * filename = permutation4.txt, k = 4
  * filename = permutation6.txt, k = 2
==> passed

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
  * filename = permutation5.txt, k = 2
  * filename = permutation5.txt, k = 3
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 2
==> passed

Total: 9/9 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference RandomizedQueue and Deque)
********************************************************************************

Timing Permutation
*-----------------------------------------------------------
Running 23 total tests.

Test 1: count calls to methods in StdIn
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 2: count calls to methods in Deque and RandomizedQueue
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 3: count calls to methods in StdRandom
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 4: Time main() with k = 5, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.02
=> passed       64000     0.03
=> passed      128000     0.05
=> passed      256000     0.08
=> passed      512000     0.15
==> 10/10 tests passed


Test 5: Time main() with k = 1000, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.00
=> passed       32000     0.01
=> passed       64000     0.02
=> passed      128000     0.04
=> passed      256000     0.07
=> passed      512000     0.28
==> 10/10 tests passed


Total: 23/23 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: check that the maximum size of any Deque or RandomizedQueue object
        created is between k and n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 500
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 5000
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50000
    - max size of RandomizedQueue object = 138653

==> FAILED

Total: 2/2 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a Deque
containing n items is 48n + 192.

Running 48 total tests.

Test 1a-1i: total memory usage after inserting n items,
            where n is a power of 2

                 n        bytes
----------------------------------------------------------
=> passed       32          320         
=> passed       64          576         
=> passed      128         1088         
=> passed      256         2112         
=> passed      512         4160         
=> passed     1024         8256         
=> passed     2048        16448         
=> passed     4096        32832         
=> passed     8192        65600         
==> 9/9 tests passed

Memory: 8.00 n + 64.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33          576         
=> passed       65         1088         
=> passed      129         2112         
=> passed      257         4160         
=> passed      513         8256         
=> passed     1025        16448         
=> passed     2049        32832         
=> passed     4097        65600         
=> passed     8193       131136         
==> 9/9 tests passed

Memory: 16.00 n + 48.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1088         
=> passed       65         2112         
=> passed      129         4160         
=> passed      257         8256         
=> passed      513        16448         
=> passed     1025        32832         
=> passed     2049        65600         
=> passed     4097       131136         
=> passed     8193       262208         
==> 9/9 tests passed

Memory: 32.00 n + 32.00   (R^2 = 1.000)


Test 4a-4e: Total memory usage after inserting n items,
            and then deleting all but one item
            (should not grow with n or be too large of a constant).

                 n        bytes
----------------------------------------------------------
=> FAILED       32          320   (1.3x)
=> FAILED       64          576   (2.4x)
=> FAILED      128         1088   (4.5x)
=> FAILED      256         2112   (8.8x)
=> FAILED      512         4160  (17.3x)
=> FAILED     1024         8256  (34.4x)
=> FAILED     2048        16448  (68.5x)
=> FAILED     4096        32832 (136.8x)
=> FAILED     8192        65600 (273.3x)
==> 0/9 tests passed

Memory: 8.00 n + 64.00   (R^2 = 1.000)


Test 5a-5e: Total memory usage of iterator after inserting n items
            (should not grow with n or be too large of a constant).

                 n        bytes
----------------------------------------------------------
=> passed       32           32         
=> passed       64           32         
=> passed      128           32         
=> passed      256           32         
=> passed      512           32         
=> passed     1024           32         
=> passed     2048           32         
=> passed     4096           32         
=> passed     8192           32         
==> 9/9 tests passed

Memory: 32.00   (R^2 = 1.000)


Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively.
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 100

  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 100

  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 100

  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 100

  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 100

==> FAILED

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
    - loitering detected after operation 7 of 100
    - sequence of operations was:
         deque.addFirst("ERINTFITFF")
         deque.addFirst("XMAJVYLPOE")
         deque.addFirst("PCDFXYFMOG")
         deque.addFirst("ANMRXASCME")
         deque.addFirst("ITRVOWPWHV")
         deque.addFirst("UHAJBKOJKC")
         deque.removeFirst()     ==> UHAJBKOJKC
    - loitered object(s):
      UHAJBKOJKC

  * 100 random operations (0.8, 0.0, 0.0, 0.2)
    - loitering detected after operation 4 of 100
    - sequence of operations was:
         deque.addFirst("IXSKYNEOCB")
         deque.addFirst("NCWHDZKOWA")
         deque.addFirst("UOZTCURGHR")
         deque.removeLast()      ==> IXSKYNEOCB
    - loitered object(s):
      IXSKYNEOCB

  * 100 random operations (0.0, 0.8, 0.2, 0.0)
    - loitering detected after operation 4 of 100
    - sequence of operations was:
         deque.addLast("HUDEZYBMLW")
         deque.addLast("JTSHDEQGPZ")
         deque.addLast("EOZBJLOPTR")
         deque.removeFirst()     ==> HUDEZYBMLW
    - loitered object(s):
      HUDEZYBMLW

  * 100 random operations (0.0, 0.8, 0.0, 0.2)
    - loitering detected after operation 7 of 100
    - sequence of operations was:
         deque.addLast("IFDPQGEIJQ")
         deque.addLast("AQHHMVZOUI")
         deque.addLast("CUTBSDRTBP")
         deque.addLast("OGWEHMHMEK")
         deque.addLast("NEWISSZGTP")
         deque.addLast("IOVGHJNGEK")
         deque.removeLast()      ==> IOVGHJNGEK
    - loitered object(s):
      IOVGHJNGEK

  * 100 random operations (0.4, 0.4, 0.1, 0.1)
    - loitering detected after operation 7 of 100
    - sequence of operations was:
         deque.addFirst("KZTJWXEYVC")
         deque.addLast("ONWGPDQKFO")
         deque.addFirst("LKPNXOFQWM")
         deque.addLast("PGSPZRULTU")
         deque.addFirst("CWMOBTSOIJ")
         deque.addLast("RAEONOIVWK")
         deque.removeFirst()     ==> CWMOBTSOIJ
    - loitered object(s):
      CWMOBTSOIJ

  * 100 random operations (0.2, 0.2, 0.3, 0.3)
    - loitering detected after operation 2 of 100
    - sequence of operations was:
         deque.addFirst("DKODSUPDJW")
         deque.removeLast()      ==> DKODSUPDJW
    - loitered object(s):
      DKODSUPDJW

==> FAILED

Test 7: worst-case constant memory allocated or de-allocated
        per deque operation?
  * 128 random operations
    - failed on trial 27 of 128
    - when current size of Deque was 16 objects;
    - the call to addFirst() caused a change in memory of 128 bytes
    - any change of more than 96 bytes fails the test

  * 256 random operations
    - failed on trial 24 of 256
    - when current size of Deque was 16 objects;
    - the call to addLast() caused a change in memory of 128 bytes
    - any change of more than 96 bytes fails the test

  * 512 random operations
    - failed on trial 34 of 512
    - when current size of Deque was 16 objects;
    - the call to addLast() caused a change in memory of 128 bytes
    - any change of more than 96 bytes fails the test

==> FAILED


Min observed memory for Deque: 8.00 n + 64.00   (R^2 = 1.000)
Max observed memory for Deque: 32.00 n + 32.00   (R^2 = 1.000)

Total: 36/48 tests passed!


================================================================



Analyzing memory of RandomizedQueue
*-----------------------------------------------------------
For Tests 1-5, the maximum amount of memory allowed for
a RandomizedQueue containing n items is 48n + 192.

For Test 6, the maximum amount of memory allowed for
a RandomizedQueue iterator over n items is 8n + 72.

Test 1a-1i: Total memory usage after inserting n items
            when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32          312         
=> passed       64          568         
=> passed      128         1080         
=> passed      256         2104         
=> passed      512         4152         
=> passed     1024         8248         
=> passed     2048        16440         
=> passed     4096        32824         
=> passed     8192        65592         
==> 9/9 tests passed

Memory: 8.00 n + 56.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33          568         
=> passed       65         1080         
=> passed      129         2104         
=> passed      257         4152         
=> passed      513         8248         
=> passed     1025        16440         
=> passed     2049        32824         
=> passed     4097        65592         
=> passed     8193       131128         
==> 9/9 tests passed

Memory: 16.00 n + 40.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1080         
=> passed       65         2104         
=> passed      129         4152         
=> passed      257         8248         
=> passed      513        16440         
=> passed     1025        32824         
=> passed     2049        65592         
=> passed     4097       131128         
=> passed     8193       262200         
==> 9/9 tests passed

Memory: 32.00 n + 24.00   (R^2 = 1.000)


Test 4a-4i: Total memory usage after inserting n items, deleting n items,
            then inserting n times, when n is a power of 2.

                 n        bytes
----------------------------------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 32 out of bounds for length 32

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    MemoryOfRandomizedQueue.test4(MemoryOfRandomizedQueue.java:251)
    MemoryOfRandomizedQueue.main(MemoryOfRandomizedQueue.java:751)

Test 5a-5i: Total memory usage after inserting n items,
            and then deleting all but one item.

                 n        bytes
----------------------------------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 32 out of bounds for length 32

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    MemoryOfRandomizedQueue.test5(MemoryOfRandomizedQueue.java:292)
    MemoryOfRandomizedQueue.main(MemoryOfRandomizedQueue.java:752)

Test 6a-6i: Total memory usage of iterator after inserting n items.

                 n        bytes
----------------------------------------------------------
=> passed       32           32         
=> passed       64           32         
=> passed      128           32         
=> passed      256           32         
=> passed      512           32         
=> passed     1024           32         
=> passed     2048           32         
=> passed     4096           32         
=> passed     8192           32         
==> 9/9 tests passed

Memory: 32.00   (R^2 = 1.000)


Test 7a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 100

==> FAILED

Test 7b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
    - loitering detected after operation 15 of 200
  * 200 random operations (0.2, 0.8, 0.0)
    - loitering detected after operation 2 of 200
    - sequence of operations was:
         rq.enqueue("VKOVQFENOF")
         rq.dequeue()     ==> "VKOVQFENOF"
    - loitered object(s):
      VKOVQFENOF

  * 200 random operations (0.6, 0.2, 0.2)
    - loitering detected after operation 4 of 200
    - sequence of operations was:
         rq.enqueue("SVPVWBUNDX")
         rq.enqueue("ZSULZXGBSD")
         rq.enqueue("TVHJSGLXII")
         rq.dequeue()     ==> "TVHJSGLXII"
    - loitered object(s):
      TVHJSGLXII

  * 200 random operations (0.2, 0.4, 0.4)
    - loitering detected after operation 8 of 200
    - sequence of operations was:
         rq.enqueue("MHHRGGEGAR")
         rq.sample()      ==> "MHHRGGEGAR"
         rq.sample()      ==> "MHHRGGEGAR"
         rq.sample()      ==> "MHHRGGEGAR"
         rq.sample()      ==> "MHHRGGEGAR"
         rq.sample()      ==> "MHHRGGEGAR"
         rq.enqueue("JWSHEMVWQS")
         rq.dequeue()     ==> "JWSHEMVWQS"
    - loitered object(s):
      JWSHEMVWQS

==> FAILED

Test 8: Insert T items into queue; then iterate over queue and check
        that worst-case constant memory is allocated or deallocated
        per iterator operation.
  * T = 64
  * T = 128
  * T = 256
==> passed

Test 9: Total memory usage after inserting n items, seeking to identify
        values of n where memory usage is minimized as a function of n.

                 n        bytes
----------------------------------------------------------
=> passed        8          120         
=> passed       16          184         
=> passed       32          312         
=> passed       64          568         
=> passed      128         1080         
=> passed      256         2104         
=> passed      512         4152         
=> passed     1024         8248         
=> passed     2048        16440         
=> passed        8          120         
=> passed       16          184         
=> passed       32          312         
=> passed       64          568         
=> passed      128         1080         
=> passed      256         2104         
=> passed      512         4152         
=> passed     1024         8248         
=> passed     2048        16440         
==> 18/18 tests passed

Memory: 8.00 n + 56.00   (R^2 = 1.000)


Test 10: Total memory usage after inserting 4096 items, then successively
         deleting items, seeking values of n where memory usage is maximized
         as a function of n

                 n        bytes
----------------------------------------------------------
=> passed     3200        65592         
=> passed     1600        65592         
=> FAILED      800        65592   (1.7x)
=> FAILED      400        65592   (3.4x)
=> FAILED      200        65592   (6.7x)
=> FAILED      100        65592  (13.1x)
=> FAILED       50        65592  (25.3x)
==> 2/7 tests passed

Memory: 65592.00   (R^2 = 1.000)


Min observed memory for RandomizedQueue: 65592.00   (R^2 = 1.000)
Max observed memory for RandomizedQueue: 32.00 n + 24.00   (R^2 = 1.000)

Running 64 total tests.

Total: 57/64 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 103 total tests.

Test 1a-1k: make n calls to addFirst() followed by n calls to removeFirst()
                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.01
=> passed      512000     0.01
=> passed     1024000     0.03
==> 11/11 tests passed


Test 2a-2k: make n calls to addLast() followed by n calls to removeLast()
                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.01
=> passed      512000     0.01
=> passed     1024000     0.03
==> 11/11 tests passed


Test 3a-3k: make n calls to addFirst() followed by n calls to removeLast()
                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.03
==> 11/11 tests passed


Test 4a-4k: make n calls to addLast() followed by n calls to removeFirst()
                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.01
=> passed      512000     0.01
=> passed     1024000     0.02
==> 11/11 tests passed


Test 5a-5g: make n random calls to addFirst(), removeFirst(), isEmpty(), and size()
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.05
=> passed     2048000     0.10
==> 12/12 tests passed


Test 6a-6g: make n random calls to addLast(), removeLast(), isEmpty(), and size(),
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.04
=> passed     2048000     0.10
==> 12/12 tests passed


Test 7a-7g: make n random calls to addFirst(), addLast(), removeFirst(), removeLast(),
            isEmpty(), and size() with probabilities (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00

    java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    Deque.addLast(Deque.java:92)
    TimeDeque.timeRandomOperations(TimeDeque.java:89)
    TimeDeque.timeRandomOperations(TimeDeque.java:191)
    TimeDeque.test7(TimeDeque.java:277)
    TimeDeque.main(TimeDeque.java:384)

=> FAILED        4096   Test did not complete due to an exception.

==> 2/12 tests passed


Test 8a-8g: make n calls to addFirst(); iterate over the n items by calling
            next() and hasNext()

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.03
=> passed     2048000     0.06
==> 12/12 tests passed


Test 9a-9k: make n calls to addFirst()/addLast(); interleave n calls each to
            removeFirst(), removeLast(), addFirst(), and addLast()

                    n  seconds
----------------------------------
=> passed        1025     0.00
=> passed        2049     0.00
=> passed        4097     0.00
=> passed        8193     0.00
=> passed       16385     0.00
=> passed       32769     0.00
=> passed       65537     0.01
=> passed      128001     0.01
=> passed      256001     0.02
=> passed      512001     0.07
=> passed     1024001     0.09
==> 11/11 tests passed

Total: 93/103 tests passed!


================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 67 total tests.

Test 1: make n calls to enqueue() followed by n calls to dequeue();
        count calls to StdRandom
  * n = 10
    - dequeue() should call StdRandom at most once
    - number of elementary StdRandom operations = 10
    - failed enqueueing item 1 of 10

  * n = 100
    - dequeue() should call StdRandom at most once
    - number of elementary StdRandom operations = 100
    - failed enqueueing item 1 of 100

  * n = 1000
    - dequeue() should call StdRandom at most once
    - number of elementary StdRandom operations = 1000
    - failed enqueueing item 1 of 1000

==> FAILED

Test 2: make n calls to enqueue() follwed by n calls to sample();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 3: make n calls to enqueue() and iterate over the n items;
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 4a-k: make n calls to enqueue() followed by n calls to dequeue()

                    n  seconds
----------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 1024 out of bounds for length 1024

    RandomizedQueue.dequeue(RandomizedQueue.java:63)
    TimeRandomizedQueue.timeEnqueueDequeue(TimeRandomizedQueue.java:297)
    TimeRandomizedQueue.test4(TimeRandomizedQueue.java:423)
    TimeRandomizedQueue.main(TimeRandomizedQueue.java:581)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 5a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.2, 0.2, 0.2, 0.2, 0.2)

                    n  seconds
----------------------------------
=> passed        1024     0.01
=> passed        2048     0.01
=> passed        4096     0.04
=> passed        8192     0.14

    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in StdRandom exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

=> FAILED       16384   [ Test did not complete due to an exception. ]

==> 4/11 tests passed


Test 6a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.6, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.01
=> passed        4096     0.02
=> passed        8192     0.09
=> passed       16384     0.37

    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in StdRandom exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

=> FAILED       32768   [ Test did not complete due to an exception. ]

==> 5/11 tests passed


Test 7a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpt

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests